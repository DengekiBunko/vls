#!/usr/bin/env sh

set -eu



# ---------------------------

# ÈÖçÁΩÆÂèòÈáè

# ---------------------------

DOMAIN="${DOMAIN:-node68.lunes.host}"

PORT="${PORT:-10008}"

UUID="${UUID:-2584b733-2b32-4036-8e26-df7b984f7f9e}"

HY2_PASSWORD="${HY2_PASSWORD:-vevc.HY2.Password}"

WS_PATH="${WS_PATH:-/wspath}"

# Âº∫ÁÉàÂª∫ËÆÆ‰ΩøÁî®‰∏Ä‰∏™‰∏çÊòìÂÜ≤Á™ÅÁöÑ TUNNEL_NAMEÔºå‰æãÂ¶Ç‰ΩøÁî®ÂâçÁºÄ
TUNNEL_NAME="${TUNNEL_NAME:-lunes-tunnel}" 

WORKDIR="${WORKDIR:-/home/container}"



# ---------------------------

# ‰∏ãËΩΩ app.js Âíå package.json

# ---------------------------

echo "[node] downloading app.js and package.json ..."

curl -sSL -o "$WORKDIR/app.js" https://raw.githubusercontent.com/vevc/one-node/refs/heads/main/lunes-host/app.js

curl -sSL -o "$WORKDIR/package.json" https://raw.githubusercontent.com/vevc/one-node/refs/heads/main/lunes-host/package.json



# ---------------------------

# Xray (xy) VLESS+WS+TLS ÈÖçÁΩÆ

# ---------------------------

mkdir -p "$WORKDIR/xy"

cd "$WORKDIR/xy"



curl -sSL -o Xray-linux-64.zip https://github.com/XTLS/Xray-core/releases/latest/download/Xray-linux-64.zip

if command -v unzip >/dev/null 2>&1; then

¬† ¬† unzip -o Xray-linux-64.zip >/dev/null 2>&1 || true

fi

rm -f Xray-linux-64.zip

[ -f xray ] && mv -f xray xy || true

[ -f Xray ] && mv -f Xray xy || true

chmod +x xy



# Á°Æ‰øùÂú®Ê≠£Á°ÆÁöÑÂ∑•‰ΩúÁõÆÂΩïÂàõÂª∫ËØÅ‰π¶ÔºåÊàñ‰ΩøÁî®ÂÆåÊï¥Ë∑ØÂæÑ
openssl req -x509 -newkey rsa:2048 -days 3650 -nodes -keyout key.pem -out cert.pem -subj "/CN=$DOMAIN"



cat > config.json <<EOF

{

¬† "log": { "loglevel": "warning" },

¬† "inbounds": [

¬† ¬† {

¬† ¬† ¬† "port": $PORT,

¬† ¬† ¬† "protocol": "vless",

¬† ¬† ¬† "settings": { "clients": [{ "id": "$UUID", "email": "lunes-ws-tls" }], "decryption": "none" },

¬† ¬† ¬† "streamSettings": {

¬† ¬† ¬† ¬† "network": "ws",

¬† ¬† ¬† ¬† "security": "tls",

¬† ¬† ¬† ¬† "tlsSettings": { "certificates": [{ "certificateFile": "$WORKDIR/xy/cert.pem", "keyFile": "$WORKDIR/xy/key.pem" }] },

¬† ¬† ¬† ¬† "wsSettings": { "path": "$WS_PATH" }

¬† ¬† ¬† }

¬† ¬† }

¬† ],

¬† "outbounds": [{ "protocol": "freedom" }]

}

EOF



# ---------------------------

# Hysteria2 (h2) ÈÖçÁΩÆ

# ---------------------------

mkdir -p "$WORKDIR/h2"
cd "$WORKDIR/h2"
curl -sSL -o h2 https://github.com/apernet/hysteria/releases/download/app%2Fv2.6.2/hysteria-linux-amd64
curl -sSL -o config.yaml https://raw.githubusercontent.com/vevc/one-node/refs/heads/main/lunes-host/hysteria-config.yaml
# Á°Æ‰øùÂú®Ê≠£Á°ÆÁöÑÂ∑•‰ΩúÁõÆÂΩïÂàõÂª∫ËØÅ‰π¶ÔºåÊàñ‰ΩøÁî®ÂÆåÊï¥Ë∑ØÂæÑ
openssl req -x509 -newkey rsa:2048 -days 3650 -nodes -keyout key.pem -out cert.pem -subj "/CN=$DOMAIN"
chmod +x h2
sed -i "s/10008/$PORT/g" config.yaml
sed -i "s/HY2_PASSWORD/$HY2_PASSWORD/g" config.yaml
# ËøôÈáåÁöÑ node ÂëΩ‰ª§ÊâßË°åÂèØËÉΩÂú®Êüê‰∫õÊûÅÁÆÄÁéØÂ¢É‰∏≠Â§±Ë¥•Ôºå‰ΩÜÊöÇÊó∂‰øùÁïô
encodedHy2Pwd=$(node -e "console.log(encodeURIComponent(process.argv[1]))" "$HY2_PASSWORD")
hy2Url="hysteria2://$encodedHy2Pwd@$DOMAIN:$PORT?insecure=1#lunes-hy2"
echo "$hy2Url" >> "$WORKDIR/node.txt"



# ---------------------------

# Cloudflare Tunnel ‰∫§‰∫íÂºèÁôªÂΩï + tunnel ÂàõÂª∫ÂíåÂêØÂä®

# ---------------------------

CLOUDFLARED_BIN="$WORKDIR/cloudflared"

CLOUDFLARED_DIR="$WORKDIR/.cloudflared"

mkdir -p "$CLOUDFLARED_DIR"



if [ ! -x "$CLOUDFLARED_BIN" ]; then

¬† ¬† echo "[cloudflared] downloading cloudflared ..."

¬† ¬† curl -fsSL -o "$CLOUDFLARED_BIN" https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64

¬† ¬† chmod +x "$CLOUDFLARED_BIN"

fi



echo "-------- Cloudflared interactive login --------"

# ÂøÖÈ°ªÂêØÁî®ÈîôËØØÊ£ÄÊü• (set -e) Êù•ÊçïËé∑ÁôªÂΩïÂ§±Ë¥•Ôºå‰ΩÜÁôªÂΩïÊòØ‰∏Ä‰∏™‰∫§‰∫íÂºèËøáÁ®ãÔºåÂõ†Ê≠§‰øùÁïô set +e Âú®Ëøô‰πãÂâç

set +e

"$CLOUDFLARED_BIN" login

set -e



WAIT=0 MAX=300 SLEEP=5 CERT=""

while [ $WAIT -lt $MAX ]; do

¬† ¬† if [ -f "$CLOUDFLARED_DIR/cert.pem" ]; then

¬† ¬† ¬† ¬† CERT="$CLOUDFLARED_DIR/cert.pem"

¬† ¬† ¬† ¬† break

¬† ¬† fi

¬† ¬† echo "[cloudflared] waiting for cert.pem $WAIT/$MAX"

¬† ¬† sleep $SLEEP

¬† ¬† WAIT=$((WAIT + SLEEP))

done



if [ -z "$CERT" ]; then

¬† ¬† echo "[cloudflared] cert.pem not found. ËØ∑ÊîæÁΩÆ cert.pem Âà∞ $CLOUDFLARED_DIR ÊàñÊâãÂä® login"

else

¬† ¬† echo "[cloudflared] found cert.pem, creating and running tunnel '$TUNNEL_NAME'..."

¬† ¬† # 1. Â∞ùËØïÂàõÂª∫ÈößÈÅì„ÄÇÂ¶ÇÊûúÈößÈÅìÂ∑≤Â≠òÂú®ÔºåÊ≠§ÂëΩ‰ª§ÂèØËÉΩ‰ºöÂ§±Ë¥•Ôºà‰ΩÜ Cloudflared ‰ºöËá™Âä®Â§ÑÁêÜÔºâ

¬† ¬† # ‰∏∫‰∫ÜÈò≤Ê≠¢Â∑≤Â≠òÂú®ÈößÈÅìÂØºËá¥ËÑöÊú¨ÈÄÄÂá∫ÔºåÊàë‰ª¨‰ªçÁÑ∂‰ΩøÁî® || trueÔºå‰ΩÜ‰ºöÊ£ÄÊü•Âá≠ËØÅÊñá‰ª∂ÊòØÂê¶Â≠òÂú®„ÄÇ

¬† ¬† "$CLOUDFLARED_BIN" tunnel create "$TUNNEL_NAME" --credentials-file "$CLOUDFLARED_DIR/$TUNNEL_NAME.json" || echo "Tunnel '$TUNNEL_NAME' might already exist or creation failed."

¬† ¬† 

¬† ¬† # 2. Â∞ùËØïÈÖçÁΩÆ DNS Ë∑ØÁî±

¬† ¬† # --overwrite-dns ÈÄâÈ°πÂèØ‰ª•Á°Æ‰øùÊóßÁöÑ DNS ËÆ∞ÂΩïË¢´Ë¶ÜÁõñ„ÄÇ

¬† ¬† "$CLOUDFLARED_BIN" tunnel route dns "$TUNNEL_NAME" "$DOMAIN" --overwrite-dns 

¬† ¬† 

¬† ¬† # 3. ÂàõÂª∫ Tunnel ÁöÑÈÖçÁΩÆÊñá‰ª∂ config.yml

¬† ¬† cat > "$CLOUDFLARED_DIR/config.yml" <<CONFIG

tunnel: $TUNNEL_NAME

credentials-file: $CLOUDFLARED_DIR/$TUNNEL_NAME.json

originRequest:

¬† noTLSVerify: true

ingress:

¬† - hostname: $DOMAIN

¬† ¬† service: http://localhost:$PORT

¬† - service: http_status:404

CONFIG



¬† ¬† # 4. ÂêØÂä® Cloudflare Tunnel Âú®ÂêéÂè∞ËøêË°å

¬† ¬† echo "[cloudflared] starting tunnel '$TUNNEL_NAME' in background..."

¬† ¬† "$CLOUDFLARED_BIN" tunnel run --config "$CLOUDFLARED_DIR/config.yml" "$TUNNEL_NAME" &

¬† ¬† # Áªô tunnel Âá†ÁßíÈíüÂêØÂä®Êó∂Èó¥

¬† ¬† sleep 5

¬† ¬† echo "[cloudflared] initialization done."

fi



# ---------------------------

# ÊûÑÂª∫ VLESS Âíå HY2 ÈìæÊé•

# ---------------------------

# Ê≥®ÊÑèÔºöVLESS Âíå HY2 ÈìæÊé•‰∏≠ÁöÑÁ´ØÂè£Â∑≤Âõ∫ÂÆö‰∏∫ 443ÔºåËøôÊòØ Cloudflare ÈößÈÅìÈªòËÆ§ÁöÑÂá∫Âè£Á´ØÂè£„ÄÇ

ENC_PATH=$(node -e "console.log(encodeURIComponent(process.argv[1]))" "$WS_PATH")

ENC_PWD=$(node -e "console.log(encodeURIComponent(process.argv[1]))" "$HY2_PASSWORD")

# Á°Æ‰øùÈìæÊé•‰∏≠‰ΩøÁî® $DOMAIN ‰Ωú‰∏∫‰∏ªÊú∫Âêç

VLESS_URL="vless://$UUID@$DOMAIN:443?encryption=none&security=tls&type=ws&host=$DOMAIN&path=${ENC_PATH}&sni=$DOMAIN#lunes-ws-tls"

HY2_URL="hysteria2://$ENC_PWD@$DOMAIN:443?insecure=1#lunes-hy2" # Hysteria2 ‰∏çËµ∞ Cloudflare TunnelÔºå‰ΩÜ‰øùÁïô 443 Á´ØÂè£‰æø‰∫éÁ©øÈÄè



# Ë¶ÜÁõñ‰πãÂâçÁöÑ node.txt

echo "$VLESS_URL" > "$WORKDIR/node.txt"

echo "$HY2_URL" >> "$WORKDIR/node.txt"



# ---------------------------

# ËæìÂá∫‰ø°ÊÅØ

# ---------------------------

echo "============================================================"

echo "üöÄ VLESS WS+TLS & HY2 Node Info"

echo "$VLESS_URL"

echo "$HY2_URL"

echo "============================================================"

echo "‚úÖ install.sh finished. You can start the server with: node $WORKDIR/app.js"
